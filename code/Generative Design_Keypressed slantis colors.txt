/** LICENSE
  * P_2_2_6_03
  * Generative Gestaltung – Creative Coding im Web
  * ISBN: 978-3-87439-902-9, First Edition, Hermann Schmidt, Mainz, 2018
  * Benedikt Groß, Hartmut Bohnacker, Julia Laub, Claudius Lazzeroni
  * with contributions by Joey Lee and Niels Poldervaart
  * Copyright 2018
  *
  * http://www.generative-gestaltung.de
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.


  /** SLANTIS NOTES
  * The following code is a modified version of P_2_2_6_03 found at 
  * http://www.generative-gestaltung.de/2/sketches/?01_P/P_2_2_6_03
  */

//slantis code description

/**
 * Drawing tool that moves a pendulum contraption along paths drawn by a set of points.
 *
 * KEYS
 * 1                   : toggle pendulum color to /slantis orange
 * 2                   : toggle pendulum color to /slantis yellow
 * 3                   : toggle pendulum color to /slantis purple
 * 4                   : toggle pendulum color to /slantis blue
 * 5                   : toggle pendulum color to /slantis pink
 * 6                   : toggle pendulum color to /slantis green
 * s                   : save png
 */

 var shapes = [];

 var linelength = 200;
 var resolution = 0.015;
 var gravity = 0.094;
 var damping = 0.998;
 
 var showPath = false;
 var showPendulum = true;
 var clearScreen = false;
 
 //slantis variables
 var joints = randomjoints;
 var newShape;
 var randomslantiscolor = [];
 var curve_drawn = false;
 var xx = [];
 var yy = [];
 var mj = [];
 var randomjoints = [];
 
 // User Inputs
 canvaswidth = 2500; // TO MAKE CANVAS FIT IN SCREEN INPUT windowWidth
 canvasheight = 2500; // TO MAKE CANVAS FIT IN SCREEN INPUT windowHeight
 let url =
   "https://docs.google.com/spreadsheets/d/e/2PACX-1vQXsPSC8TxNE9OF3hmuDaLY_eEX5Dt8WbIw-vVJJlWJjGiZei4AbC4F7wHBPpEkXPUWP_YEuI_um8Ph/pub?gid=2134782002&single=true&output=csv";
 
 // canvas setup
 function setup() {
   createCanvas(canvaswidth, canvasheight);
   colorMode(RGB, 255);
   noFill();
   strokeWeight(1);
   slantorange = color("rgb(255, 119, 0)");
   slantyellow = color("rgb(255, 233, 0)");
   slantpurple = color("rgb(85, 36, 151)");
   slantblue = color("rgb(91, 217, 214)");
   slantpink = color("rgb(237, 71, 182)");
   slantgreen = color("rgb(68, 193, 93)");
 }
 
 //import data
 let data;
 
 function preload() {
   data = loadTable(url, "csv", "header");
 }
 
 //function to set first color to a random /slantis colors
 function set_color() {
   slantcolors = [
     slantorange,
     slantyellow,
     slantpurple,
     slantblue,
     slantpink,
     slantgreen,
   ];
   pendcolor = slantcolors[Math.floor(Math.random() * slantcolors.length)];
   randomslantiscolor.push(pendcolor);
 }
 
 // draw paths by set points
 function draw_curve() {
   if (data) {
     let numRows = data.getRowCount();
     let cordX = data.getColumn("cordX");
     let cordY = data.getColumn("cordY");
     let memberscount = data.getColumn("members");
     for (let i = 0; i < numRows; i++) {
       var x = cordX[i];
       var y = cordY[i];
       let members_joints = memberscount[i];
       xx.push(int(x));
       yy.push(int(y));
       mj.push(members_joints);
     }
   }
   random_joints_per_members = mj[Math.floor(Math.random() * mj.length)];
   randomjoints.push(random_joints_per_members);
   newShape = new Shape(randomslantiscolor);
   for (let j = 0, h = 0; j < xx.length, h < yy.length; j++, h++) {
     newShape.addPos(xx[j], yy[h]);
     print("xx, yy", xx[j], yy[h]);
   }
   shapes.push(newShape);
   newShape = undefined;
   print("random joint count", randomjoints);
 }
 
 function draw() {
   if (clearScreen) background(0, 0, 100);
 
   shapes.forEach(function (shape) {
     shape.draw();
     shape.update();
   });
 
   if (curve_drawn == false) {
     set_color();
     draw_curve();
     curve_drawn = true;
   }
 }
 
 function Shape() {
   this.shapePath = [];
   this.pendulumPath = [];
   this.iterator = 0;
   this.linelength = linelength;
   this.resolution = resolution;
   this.pendulum = new Pendulum(this.linelength, joints);
 
   Shape.prototype.addPos = function (x, y) {
     var newPos = createVector(x, y);
     this.shapePath.push(newPos);
   };
 
   Shape.prototype.draw = function () {
     strokeWeight(0.8);
     stroke(0, 10);
 
     if (showPath) {
       beginShape();
       this.shapePath.forEach(function (pos) {
         vertex(pos.x, pos.y);
       });
       endShape();
     }
 
     if (this.iterator < this.shapePath.length) {
       var currentIndex = floor(this.iterator);
 
       var currentPos = this.shapePath[currentIndex];
       var previousPos = this.shapePath[currentIndex - 1];
       if (previousPos) {
         var offsetPos = p5.Vector.lerp(
           previousPos,
           currentPos,
           this.iterator - currentIndex
         );
         var heading =
           atan2(currentPos.y - previousPos.y, currentPos.x - previousPos.x) -
           HALF_PI;
 
         push();
         translate(offsetPos.x, offsetPos.y);
         this.pendulum.update(heading);
         if (showPendulum) {
           this.pendulum.draw();
         }
         pop();
 
         this.pendulumPath.push(this.pendulum.getTrail(offsetPos));
       }
     }
   };
 
   Shape.prototype.update = function () {
     this.iterator += this.resolution;
     this.iterator = constrain(this.iterator, 0, this.shapePath.length);
   };
 }
 
 function Pendulum(size, hierarchy) {
   this.hierarchy = hierarchy - 1;
   this.pendulumArm;
   this.size = size;
   this.angle = random(TAU);
   this.origin = createVector(0, 0);
   this.end = createVector(0, 0);
   this.gravity = gravity;
   this.damping = damping;
   this.angularAcceleration = 0;
   this.angularVelocity = 0;
 
   if (this.hierarchy > 0) {
     this.pendulumArm = new Pendulum(this.size / 1.5, this.hierarchy);
   }
 
   Pendulum.prototype.update = function (heading) {
     this.end.set(
       this.origin.x + this.size * sin(this.angle),
       this.origin.y + this.size * cos(this.angle)
     );
 
     this.angularAcceleration =
       (-this.gravity / this.size) * sin(this.angle + heading);
     this.angle += this.angularVelocity;
     this.angularVelocity += this.angularAcceleration;
     this.angularVelocity *= this.damping;
 
     if (this.pendulumArm) {
       this.pendulumArm.update(heading);
     }
   };
 
   Pendulum.prototype.getTrail = function (offset, end) {
     if (this.pendulumArm) {
       if (end) {
         end.add(this.end);
       } else {
         end = this.end.copy();
       }
       return this.pendulumArm.getTrail(offset, end);
     } else {
       return this.end.copy().add(end).add(offset);
     }
   };
 
   Pendulum.prototype.draw = function () {
     stroke(pendcolor);
     beginShape();
     vertex(this.origin.x, this.origin.y);
     vertex(this.end.x, this.end.y);
     endShape();
 
     fill(0, 20);
     ellipse(this.end.x, this.end.y, 2, 2);
     noFill();
 
     if (this.pendulumArm) {
       push();
       translate(this.end.x, this.end.y);
       this.pendulumArm.draw();
       pop();
     }
   };
 }
 
 function keyTyped() {
   if (key === "s" || key === "S") saveCanvas("myCanvas", "png");
 
   // slantis default colors from 1 to 4
   if (key == "1") {
     pendcolor = slantorange;
     print("color changed to Orange");
   }
   if (key == "2") {
     pendcolor = slantyellow;
     print("color changed to Yellow");
   }
   if (key == "3") {
     pendcolor = slantpurple;
     print("color changed to Purple");
   }
   if (key == "4") {
     pendcolor = slantblue;
     print("color changed to Cyan");
   }
   if (key == "5") {
     pendcolor = slantpink;
     print("color changed to Magenta");
   }
   if (key == "6") {
     pendcolor = slantgreen;
     print("color changed to Green");
   }
 }
 