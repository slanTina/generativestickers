/** ORIGINAL CODE TEXT 
*  P_2_2_6_03
* 
*  Generative Gestaltung – Creative Coding im Web
*  ISBN: 978-3-87439-902-9, First Edition, Hermann Schmidt, Mainz, 2018
*  Benedikt Groß, Hartmut Bohnacker, Julia Laub, Claudius Lazzeroni
*  with contributions by Joey Lee and Niels Poldervaart
*  Copyright 2018
* 
*  http://www.generative-gestaltung.de
* 
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.

 * Drawing tool that moves a pendulum contraption along paths drawn by the mouse.
 * The last joint of the pendulum leaves behind its own trail.
 *
 * MOUSE
 * mouse               : click and drag to create a path to draw a pendulum along with
 *
 * KEYS
 * 1                   : toggle path line
 * 2                   : toggle pendulum
 * 3                   : toggle pendulum path
 * 4                   : toggle clear screen
 * -                   : decrease gravity
 * +                   : increase gravity
 * arrow down          : decrease length of lines
 * arrow up            : increase length of lines
 * arrow left          : decrease joints
 * arrow right         : increase joints
 * del, backspace      : clear screen
 * s                   : save png
 *
 * CONTRIBUTED BY
 * [Niels Poldervaart](http://NielsPoldervaart.nl)
 */
 
//slantis updated code description

/**
 * Drawing tool that moves a pendulum contraption along paths drawn by a set of points.
 *
 
 * KEYS
 * 1                   : toggle pendulum color to /slantis orange
 * 2                   : toggle pendulum color to /slantis yellow
 * 3                   : toggle pendulum color to /slantis purple
 * 4                   : toggle pendulum color to /slantis blue
 * 5                   : toggle pendulum color to /slantis pink
 * 6                   : toggle pendulum color to /slantis green
 * s                   : save png
 */

var shapes = [];
 
var joints = 20;
var linelength = 200;
var resolution = 0.015;
var gravity = 0.094;
var damping = 0.998;
 
var showPath = false;
var showPendulum = true;
var clearScreen = false;
 
//slantis variables
var newShape;
var randomslantiscolor= [];
var curve_drawn = false;
 
 
// canvas setup
function setup() {
  createCanvas(2500, 2500);
  colorMode(RGB,255);
  noFill();
  strokeWeight(1);
 slantorange = color('rgb(255, 119, 0)');
 slantyellow = color('rgb(255, 233, 0)');
 slantpurple = color('rgb(85, 36, 151)');
 slantblue = color('rgb(91, 217, 214)');
 slantpink = color('rgb(237, 71, 182)');
 slantgreen = color('rgb(68, 193, 93)');
}
 
//function to set first color to a random /slantis colors 
function set_color() {
  slantcolors = [
    slantorange,
    slantyellow,
    slantpurple,
    slantblue,
    slantpink,
    slantgreen,
  ];
  pendcolor = slantcolors[Math.floor(Math.random() * slantcolors.length)];
  randomslantiscolor.push(pendcolor);
}
 
// draw paths by set points
function draw_curve() {
  newShape = new Shape(randomslantiscolor);
  newShape.addPos(992, 993);	
  newShape.addPos(797, 979);	
  newShape.addPos(746, 1106);	
  newShape.addPos(692, 888);	
  newShape.addPos(903, 1531);	
  newShape.addPos(645, 961);	
  newShape.addPos(769, 904);	
  newShape.addPos(1055, 1793);	
  newShape.addPos(937, 1219);	
  newShape.addPos(1067, 1887);	
  newShape.addPos(922, 1611);	
  newShape.addPos(731, 671);	
  newShape.addPos(928, 1344);	
  shapes.push(newShape);
  newShape = undefined;
 
}
 
function draw() {
  if (clearScreen) background(0, 0, 100);
 
  shapes.forEach(function(shape) {
    shape.draw();
    shape.update();
  });
 
 if (curve_drawn == false) {
    set_color();
    draw_curve();
    curve_drawn = true;
 }
 
}
 
function Shape() {
  this.shapePath = [];
  this.pendulumPath = [];
  this.iterator = 0;
  this.linelength = linelength;
  this.resolution = resolution;
  this.pendulum = new Pendulum(this.linelength, joints);
 
  Shape.prototype.addPos = function(x, y) {
    var newPos = createVector(x, y);
    this.shapePath.push(newPos);
  };
 
  Shape.prototype.draw = function() {
    strokeWeight(0.8);
    stroke(0, 10);
  
    if (showPath) {
      beginShape();
      this.shapePath.forEach(function(pos) {
        vertex(pos.x, pos.y);
      });
      endShape();
    }
 
    if (this.iterator < this.shapePath.length) {
      var currentIndex = floor(this.iterator);
 
      var currentPos = this.shapePath[currentIndex];
      var previousPos = this.shapePath[currentIndex - 1];
      if (previousPos) {
        var offsetPos = p5.Vector.lerp(previousPos, currentPos, this.iterator - currentIndex);
        var heading = atan2(currentPos.y - previousPos.y, currentPos.x - previousPos.x) - HALF_PI;
 
        push();
        translate(offsetPos.x, offsetPos.y);
        this.pendulum.update(heading);
        if (showPendulum) {
          this.pendulum.draw();
        }
        pop();
 
        this.pendulumPath.push(this.pendulum.getTrail(offsetPos));
      }
    }
  };
 
  Shape.prototype.update = function() {
    this.iterator += this.resolution;
    this.iterator = constrain(this.iterator, 0, this.shapePath.length);
  };
}
 
function Pendulum(size, hierarchy) {
  this.hierarchy = hierarchy - 1;
  this.pendulumArm;
  this.size = size;
  this.angle = random(TAU);
  this.origin = createVector(0, 0);
  this.end = createVector(0, 0);
  this.gravity = gravity;
  this.damping = damping;
  this.angularAcceleration = 0;
  this.angularVelocity = 0;
 
  if (this.hierarchy > 0) {
    this.pendulumArm = new Pendulum(this.size / 1.5, this.hierarchy);
  }
 
  Pendulum.prototype.update = function(heading) {
    this.end.set(this.origin.x + this.size * sin(this.angle), this.origin.y + this.size * cos(this.angle));
 
    this.angularAcceleration = (-this.gravity / this.size) * sin(this.angle + heading);
    this.angle += this.angularVelocity;
    this.angularVelocity += this.angularAcceleration;
    this.angularVelocity *= this.damping;
 
    if (this.pendulumArm) {
      this.pendulumArm.update(heading);
    }
  };
 
  Pendulum.prototype.getTrail = function(offset, end) {
    if (this.pendulumArm) {
      if (end) {
        end.add(this.end);
      } else {
        end = this.end.copy();
      }
      return this.pendulumArm.getTrail(offset, end);
    } else {
      return this.end.copy().add(end).add(offset);
    }
  };
 
  Pendulum.prototype.draw = function() {
    stroke(pendcolor);
    beginShape();
    vertex(this.origin.x, this.origin.y);
    vertex(this.end.x, this.end.y);
    endShape();
 
    fill(0, 20);
    ellipse(this.end.x, this.end.y, 2, 2);
    noFill();
 
    if (this.pendulumArm) {
      push();
      translate(this.end.x, this.end.y);
      this.pendulumArm.draw();
      pop();
    }
  };
 
}
 
function keyPressed() {
  if (key == 's' || key == 'S') saveCanvas(gd.timestamp(), 'png');
  
    // slantis default colors from 1 to 4
    if (key == "1") pendcolor= slantorange;
    if (key == "2") pendcolor= slantyellow;
    if (key == "3") pendcolor= slantpurple;
    if (key == "4") pendcolor= slantblue;
    if (key == "5") pendcolor= slantpink;
    if (key == "6") pendcolor= slantgreen;
 
}